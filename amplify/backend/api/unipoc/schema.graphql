# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
# Represents a user in the system, who can create ideas, comments and votes roles are implemented using Cognito
type User
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  username: String!
  email: String!
  ideas: [Idea] @hasMany
  comments: [IdeaComment] @hasMany(indexName: "commentsByUser", fields: ["id"])
  votes: [IdeaVote] @hasMany(indexName: "votesByUser", fields: ["id"])
  createdAt: AWSDateTime!
  avatar: String
}

# Represents an idea in the system, which can have comments and votes#
type Idea
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  name: String!
  description: String!
  # Attachments are stored in S3 and the path is stored in the database (not the true url this has to be got using the aws-sdk )
  attachments: [String]
  statusId: ID!
    @auth(
      rules: [
        { allow: groups, groups: ["Admin"] }
        { allow: public, operations: [read] }
        { allow: owner, operations: [read] }
      ]
    )
  Status: status @belongsTo(fields: ["statusId"])
  Comments: [IdeaComment] @hasMany(indexName: "commentsByIdea", fields: ["id"])
  votes: [IdeaVote] @hasMany(indexName: "votesByIdea", fields: ["id"])
}

# Represents a comment on an idea, which can have child comments
type IdeaComment
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  content: String!
  parentCommentId: ID
  ideaId: ID! @index(name: "commentsByIdea")
  userId: ID! @index(name: "commentsByUser")
  Idea: Idea @belongsTo(fields: ["ideaId"])
  User: User @belongsTo(fields: ["userId"])
  ParentComment: IdeaComment @belongsTo(fields: ["parentCommentId"])
  childComments: [IdeaComment] @hasMany(fields: ["parentCommentId"])
}

# Represents a vote on an idea
# A user can only vote once on an idea
type IdeaVote
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  ideaId: ID! @index(name: "votesByIdea")
  userId: ID! @index(name: "votesByUser")
  Idea: Idea @belongsTo(fields: ["ideaId"])
  User: User @belongsTo(fields: ["userId"])
}

# Represents a status in the system, which can have transitions to other statuses
# The "steps" fields are used to order the statuses only the admin can change the order and the status of the idea
type status
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  name: String!
  description: String!
  color: String!
  ideas: [Idea] @hasMany
  nextSteps: [statusTransition]
    @hasMany(indexName: "transitionByFromState", fields: ["id"])
  previousSteps: [statusTransition]
    @hasMany(indexName: "transitionByToState", fields: ["id"])
  step: Int!
}

# Represents a transition between two statuses
# The "fromStatusId" and "toStatusId" fields are used to define the transition
# The "fromStatus" and "toStatus" fields are used to get the status objects
# The "fromStatusId" and "toStatusId" fields are indexed to allow for quick lookups
# this will allow the admin to setup the rules for the transitions
type statusTransition @model {
  id: ID!
  fromStatusId: ID!
    @index(name: "transitionByFromState", sortKeyFields: ["toStatusId"])
  toStatusId: ID!
    @index(name: "transitionByToState", sortKeyFields: ["fromStatusId"])
  fromStatus: status @belongsTo(fields: ["fromStatusId"])
  toStatus: status @belongsTo(fields: ["toStatusId"])
}
